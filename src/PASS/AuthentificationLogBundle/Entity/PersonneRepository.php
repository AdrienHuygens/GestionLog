<?php

namespace PASS\AuthentificationLogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * PersonneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonneRepository extends EntityRepository implements UserProviderInterface {

    public function loadUserByUsername($login) {
      var_dump('loaduserByusername');
        $q = $this
                ->createQueryBuilder('i')
                ->select(array('i', 'p'))
                ->leftJoin('i.groupes', 'p')
                //->leftJoin('p.roles', 'r')
                ->where('i.username = :login')
                
                ->setParameter('login', $login)
                ->getQuery();
        try {
// La méthode Query::getSingleResult() lance une exception
// s'il n'y a pas d'entrée correspondante aux critères
            $user = $q->setMaxResults(1);
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('L\'utilisateur "%s" n\'a pas été trouvé ou n\'est pas actif.', $username), 0, $e);
        }
        return $user->getResult();
    }

   public function loadById($id) {
        $q = $this
                ->createQueryBuilder('i')
                ->select(array('i', 'p'))
                ->leftJoin('i.groupes', 'p')
                //->leftJoin('p.roles', 'r')
                ->where('i.id = :id')
                
                ->setParameter('id', $id)
                ->getQuery();
        try {
            // La méthode Query::getSingleResult() lance une exception
            // s'il n'y a pas d'entrée correspondante aux critères
           $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('L\'utilisateur "%s" n\'a pas été trouvé ou n\'est pas actif.', $username), 0, $e);
        }
       
        return $user;
    }

    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
            sprintf(
                    'Instances of "%s" are not supported.', $class
            )
            );
        }
        return $this->loadById($user->getId());
    }

    function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    function getAllUser() {
        return $this->createQueryBuilder('p')
                        ->select('p')
                        ->orderBy("p.username")
                        ->getQuery()->execute();
    }

}
